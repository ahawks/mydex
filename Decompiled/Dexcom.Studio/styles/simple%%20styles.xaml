<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:d="http://schemas.microsoft.com/expression/interactivedesigner/2006"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006">
  <LinearGradientBrush x:Key="NormalBrush" EndPoint="0,1" StartPoint="0,0">
    <GradientStop Color="#FFE7E7E7" Offset="0.0"/>
    <GradientStop Color="#FFC4C3C3" Offset="0.992"/>
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="NormalBorderBrush" EndPoint="0,1" StartPoint="0,0">
    <GradientStop Color="DarkGray" Offset="0.0"/>
    <GradientStop Color="#FF4E4E4E" Offset="1.0"/>
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="BackgroundBrush" EndPoint="0,1" StartPoint="0,0">
    <GradientStop Color="#FFBEBEBE" Offset="0.0"/>
    <GradientStop Color="#FF848484" Offset="1"/>
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="LightBrush" EndPoint="0,1" StartPoint="0,0">
    <GradientStop Color="#FFF" Offset="0.0"/>
    <GradientStop Color="#EEE" Offset="1.0"/>
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="MouseOverBrush" EndPoint="0,1" StartPoint="0,0">
    <GradientStop Color="#FFDAE4EA" Offset="0"/>
    <GradientStop Color="#FF8FAFC2" Offset="1"/>
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="PressedBrush" EndPoint="0,1" StartPoint="0,0">
    <GradientStop Color="#BBB" Offset="0.0"/>
    <GradientStop Color="#EEE" Offset="0.1"/>
    <GradientStop Color="#EEE" Offset="0.9"/>
    <GradientStop Color="#FFF" Offset="1.0"/>
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="PressedBorderBrush" EndPoint="0,1" StartPoint="0,0">
    <GradientStop Color="#444" Offset="0.0"/>
    <GradientStop Color="#888" Offset="1.0"/>
  </LinearGradientBrush>
  <SolidColorBrush x:Key="SelectedBackgroundBrush" Color="#FFAFC5D3"/>
  <SolidColorBrush x:Key="DisabledForegroundBrush" Color="#888"/>
  <SolidColorBrush x:Key="DisabledBackgroundBrush" Color="#EEE"/>
  <SolidColorBrush x:Key="DisabledBorderBrush" Color="#AAA"/>
  <SolidColorBrush x:Key="WindowBackgroundBrush" Color="#FFF"/>
  <LinearGradientBrush x:Key="DefaultedBorderBrush" EndPoint="0,1" StartPoint="0,0">
    <GradientStop Color="#777" Offset="0.0"/>
    <GradientStop Color="#000" Offset="1.0"/>
  </LinearGradientBrush>
  <SolidColorBrush x:Key="SolidBorderBrush" Color="#888"/>
  <SolidColorBrush x:Key="LightBorderBrush" Color="#AAA"/>
  <SolidColorBrush x:Key="LightColorBrush" Color="#DDD"/>
  <SolidColorBrush x:Key="GlyphBrush" Color="#444"/>
  <Style x:Key="SimpleButtonFocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Border>
            <Rectangle Margin="2" Stroke="#60000000" StrokeThickness="1" StrokeDashArray="1 2"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type Button}" BasedOn="{x:Null}">
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{DynamicResource SimpleButtonFocusVisual}"/>
    <Setter Property="Control.Background" Value="{DynamicResource NormalBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Grid x:Name="Grid">
            <Border x:Name="Border" Background="{TemplateBinding Control.Background}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    Padding="{TemplateBinding Control.Padding}" CornerRadius="4"/>
            <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              Margin="{TemplateBinding Control.Padding}"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" RecognizesAccessKey="true"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsKeyboardFocused" Value="true">
              <Setter Value="{DynamicResource DefaultedBorderBrush}" TargetName="Border" Property="Border.BorderBrush"/>
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter Value="{DynamicResource MouseOverBrush}" TargetName="Border" Property="Border.Background"/>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
              <Setter Value="{DynamicResource PressedBrush}" TargetName="Border" Property="Border.Background"/>
              <Setter Value="{DynamicResource PressedBorderBrush}" TargetName="Border" Property="Border.BorderBrush"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="true"/>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border" Property="Border.Background"/>
              <Setter Value="{DynamicResource DisabledBorderBrush}" TargetName="Border" Property="Border.BorderBrush"/>
              <Setter Value="{DynamicResource DisabledForegroundBrush}" Property="Control.Foreground"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="RadioButtonFocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Border>
            <Rectangle Margin="15,0,0,0" Stroke="#60000000" StrokeThickness="1" StrokeDashArray="1 2"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="CheckBoxFocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Border>
            <Rectangle Margin="15,0,0,0" Stroke="#60000000" StrokeThickness="1" StrokeDashArray="1 2"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type CheckBox}">
    <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{DynamicResource CheckBoxFocusVisual}"/>
    <Setter Property="Control.Background" Value="{DynamicResource NormalBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type CheckBox}">
          <BulletDecorator Background="Transparent">
            <BulletDecorator.Bullet>
              <Grid Width="14" Height="14">
                <Border x:Name="Border" Background="{TemplateBinding Control.Background}"
                        BorderBrush="{TemplateBinding Control.BorderBrush}"
                        BorderThickness="{TemplateBinding Control.BorderThickness}"/>
                <Path x:Name="CheckMark" Stroke="{DynamicResource GlyphBrush}" StrokeThickness="1"
                      SnapsToDevicePixels="false" Data="M 2,2 L 11,11 M 2,11 L 11,2 "/>
              </Grid>
            </BulletDecorator.Bullet>
            <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              Margin="{TemplateBinding Control.Padding}"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" RecognizesAccessKey="true"/>
          </BulletDecorator>
          <ControlTemplate.Triggers>
            <Trigger Property="ToggleButton.IsChecked" Value="false">
              <Setter TargetName="CheckMark" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter Value="{DynamicResource MouseOverBrush}" TargetName="Border" Property="Border.Background"/>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
              <Setter Value="{DynamicResource PressedBrush}" TargetName="Border" Property="Border.Background"/>
              <Setter Value="{DynamicResource PressedBorderBrush}" TargetName="Border" Property="Border.BorderBrush"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border" Property="Border.Background"/>
              <Setter Value="{DynamicResource DisabledBorderBrush}" TargetName="Border" Property="Border.BorderBrush"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type RadioButton}">
    <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{DynamicResource RadioButtonFocusVisual}"/>
    <Setter Property="Control.Background" Value="{DynamicResource NormalBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RadioButton}">
          <BulletDecorator Background="Transparent">
            <BulletDecorator.Bullet>
              <Grid Width="13" Height="13">
                <Ellipse x:Name="Ellipse_Border" Fill="{TemplateBinding Control.Background}"
                         Stroke="{TemplateBinding Control.BorderBrush}" StrokeThickness="1"/>
                <Ellipse x:Name="CheckMark" Margin="4" Fill="{DynamicResource GlyphBrush}"/>
              </Grid>
            </BulletDecorator.Bullet>
            <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              Margin="{TemplateBinding Control.Padding}"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" RecognizesAccessKey="true"/>
          </BulletDecorator>
          <ControlTemplate.Triggers>
            <Trigger Property="ToggleButton.IsChecked" Value="false">
              <Setter TargetName="CheckMark" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter Value="{DynamicResource MouseOverBrush}" TargetName="Ellipse_Border" Property="Shape.Fill"/>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
              <Setter Value="{DynamicResource PressedBrush}" TargetName="Ellipse_Border" Property="Shape.Fill"/>
              <Setter Value="{DynamicResource GlyphBrush}" TargetName="Ellipse_Border" Property="Shape.Stroke"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Ellipse_Border" Property="Shape.Fill"/>
              <Setter TargetName="Ellipse_Border" Property="Shape.Stroke" Value="#40000000"/>
              <Setter Property="Control.Foreground" Value="#80000000"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="SimpleRepeatButton" TargetType="{x:Type RepeatButton}" BasedOn="{x:Null}">
    <Setter Property="Control.Background" Value="{DynamicResource NormalBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <Grid>
            <Border x:Name="Border" Background="{TemplateBinding Control.Background}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"/>
            <ContentPresenter x:Name="ContentPresenter" HorizontalAlignment="Center" VerticalAlignment="Center"
                              Content="{TemplateBinding ContentControl.Content}"
                              ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                              ContentTemplateSelector="{TemplateBinding ContentControl.ContentTemplateSelector}"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsKeyboardFocused" Value="true">
              <Setter Value="{DynamicResource DefaultedBorderBrush}" TargetName="Border" Property="Border.BorderBrush"/>
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter Value="{DynamicResource MouseOverBrush}" TargetName="Border" Property="Border.Background"/>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
              <Setter Value="{DynamicResource PressedBrush}" TargetName="Border" Property="Border.Background"/>
              <Setter Value="{DynamicResource PressedBorderBrush}" TargetName="Border" Property="Border.BorderBrush"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border" Property="Border.Background"/>
              <Setter Value="{DynamicResource DisabledBorderBrush}" TargetName="Border" Property="Border.BorderBrush"/>
              <Setter Value="{DynamicResource DisabledForegroundBrush}" Property="Control.Foreground"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="SimpleThumbStyle" TargetType="{x:Type Thumb}" BasedOn="{x:Null}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          <Grid x:Name="Grid" Margin="0,0,0,0">
            <Rectangle x:Name="Rectangle" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto"
                       Height="Auto" RadiusX="2" RadiusY="2" Fill="{DynamicResource NormalBrush}"
                       Stroke="{DynamicResource NormalBorderBrush}"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsFocused" Value="true"/>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter Value="{DynamicResource MouseOverBrush}" TargetName="Rectangle" Property="Shape.Fill"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false"/>
            <Trigger Property="Thumb.IsDragging" Value="true"/>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="SimpleScrollRepeatButtonStyle" TargetType="{x:Type RepeatButton}">
    <Setter Property="Control.Background" Value="#0E000000"/>
    <Setter Property="Control.BorderBrush" Value="Transparent"/>
    <Setter Property="Control.IsTabStop" Value="false"/>
    <Setter Property="UIElement.Focusable" Value="false"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <Grid>
            <Rectangle Fill="{TemplateBinding Control.Background}" Stroke="{TemplateBinding Control.BorderBrush}"
                       StrokeThickness="{TemplateBinding Control.BorderThickness}"/>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type ScrollBar}">
    <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ScrollBar}">
          <Grid x:Name="GridRoot" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"
                Background="{TemplateBinding Control.Background}">
            <Grid.RowDefinitions>
              <RowDefinition MaxHeight="18"/>
              <RowDefinition Height="0.00001*"/>
              <RowDefinition MaxHeight="18"/>
            </Grid.RowDefinitions>
            <RepeatButton x:Name="DecreaseRepeat" Style="{DynamicResource SimpleRepeatButton}"
                          Command="ScrollBar.LineUpCommand">
              <Grid>
                <Path x:Name="DecreaseArrow" Stroke="{TemplateBinding Control.Foreground}" StrokeThickness="1"
                      Data="M 0,4 L 8,4 4,0 Z"/>
              </Grid>
            </RepeatButton>
            <Track x:Name="PART_Track" Grid.Row="1" Orientation="Vertical" IsDirectionReversed="true">
              <Track.Thumb>
                <Thumb Style="{DynamicResource SimpleThumbStyle}"/>
              </Track.Thumb>
              <Track.IncreaseRepeatButton>
                <RepeatButton x:Name="PageUp" Style="{DynamicResource SimpleScrollRepeatButtonStyle}"
                              Command="ScrollBar.PageDownCommand"/>
              </Track.IncreaseRepeatButton>
              <Track.DecreaseRepeatButton>
                <RepeatButton x:Name="PageDown" Style="{DynamicResource SimpleScrollRepeatButtonStyle}"
                              Command="ScrollBar.PageUpCommand"/>
              </Track.DecreaseRepeatButton>
            </Track>
            <RepeatButton x:Name="IncreaseRepeat" Grid.Row="2" Style="{DynamicResource SimpleRepeatButton}"
                          Command="ScrollBar.LineDownCommand">
              <Grid>
                <Path x:Name="IncreaseArrow" Stroke="{TemplateBinding Control.Foreground}" StrokeThickness="1"
                      Data="M 0,0 L 4,4 8,0 Z"/>
              </Grid>
            </RepeatButton>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="ScrollBar.Orientation" Value="Horizontal">
              <Setter TargetName="GridRoot" Property="FrameworkElement.LayoutTransform">
                <Setter.Value>
                  <RotateTransform Angle="-90"/>
                </Setter.Value>
              </Setter>
              <Setter TargetName="PART_Track" Property="Track.Orientation" Value="Vertical"/>
              <Setter TargetName="DecreaseRepeat" Property="ButtonBase.Command" Value="ScrollBar.LineLeftCommand"/>
              <Setter TargetName="IncreaseRepeat" Property="ButtonBase.Command" Value="ScrollBar.LineRightCommand"/>
              <Setter TargetName="PageDown" Property="ButtonBase.Command" Value="ScrollBar.PageLeftCommand"/>
              <Setter TargetName="PageUp" Property="ButtonBase.Command" Value="ScrollBar.PageRightCommand"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type ScrollViewer}" BasedOn="{x:Null}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ScrollViewer}">
          <Grid Background="{TemplateBinding Control.Background}">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*"/>
              <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition Height="*"/>
              <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <ScrollContentPresenter Grid.Column="0" Grid.Row="0" Margin="{TemplateBinding Control.Padding}"
                                    Content="{TemplateBinding ContentControl.Content}"
                                    ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                                    CanContentScroll="{TemplateBinding ScrollViewer.CanContentScroll}"/>
            <ScrollBar x:Name="PART_HorizontalScrollBar"
                       Visibility="{TemplateBinding ScrollViewer.ComputedHorizontalScrollBarVisibility}" Grid.Column="0"
                       Grid.Row="1" Orientation="Horizontal" ViewportSize="{TemplateBinding ScrollViewer.ViewportWidth}"
                       Minimum="0" Maximum="{TemplateBinding ScrollViewer.ScrollableWidth}"
                       Value="{Binding Path=HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"/>
            <ScrollBar x:Name="PART_VerticalScrollBar"
                       Visibility="{TemplateBinding ScrollViewer.ComputedVerticalScrollBarVisibility}" Grid.Column="1"
                       Grid.Row="0" Orientation="Vertical" ViewportSize="{TemplateBinding ScrollViewer.ViewportHeight}"
                       Minimum="0" Maximum="{TemplateBinding ScrollViewer.ScrollableHeight}"
                       Value="{Binding Path=VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"/>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type ListBox}">
    <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
    <Setter Property="Control.Background" Value="{DynamicResource WindowBackgroundBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource SolidBorderBrush}"/>
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
    <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListBox}">
          <Grid>
            <Border x:Name="Border" BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"/>
            <ScrollViewer Margin="1" Focusable="false" Background="{TemplateBinding Control.Background}">
              <StackPanel Margin="2" IsItemsHost="true"/>
            </ScrollViewer>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border" Property="Border.Background"/>
              <Setter Value="{DynamicResource DisabledBorderBrush}" TargetName="Border" Property="Border.BorderBrush"/>
            </Trigger>
            <Trigger Property="ItemsControl.IsGrouping" Value="true">
              <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type ListBoxItem}">
    <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
    <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListBoxItem}">
          <Grid SnapsToDevicePixels="true">
            <Border x:Name="Border" Background="{TemplateBinding Control.Background}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"/>
            <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="ListBoxItem.IsSelected" Value="true">
              <Setter Value="{DynamicResource SelectedBackgroundBrush}" TargetName="Border" Property="Border.Background"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter Value="{DynamicResource DisabledForegroundBrush}" Property="Control.Foreground"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="ExpanderToggleButton" TargetType="{x:Type ToggleButton}">
    <Grid>
      <Rectangle x:Name="Rectangle" Margin="0,0,0,0" Fill="Transparent" Stroke="{DynamicResource NormalBorderBrush}"/>
      <Path x:Name="Up_Arrow" HorizontalAlignment="Center" VerticalAlignment="Center"
            Fill="{DynamicResource GlyphBrush}" Data="M 0,0 L 4,4 8,0 Z"/>
      <Path x:Name="Down_Arrow" Visibility="Collapsed" HorizontalAlignment="Center" VerticalAlignment="Center"
            Fill="{DynamicResource GlyphBrush}" Data="M 0,4 L 4,0 8,4 Z"/>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="true">
        <Setter Value="{DynamicResource MouseOverBrush}" TargetName="Rectangle" Property="Shape.Fill"/>
      </Trigger>
      <Trigger Property="ButtonBase.IsPressed" Value="true">
        <Setter Value="{DynamicResource PressedBrush}" TargetName="Rectangle" Property="Shape.Fill"/>
      </Trigger>
      <Trigger Property="ToggleButton.IsChecked" Value="true">
        <Setter TargetName="Down_Arrow" Property="UIElement.Visibility" Value="Visible"/>
        <Setter TargetName="Up_Arrow" Property="UIElement.Visibility" Value="Collapsed"/>
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Rectangle" Property="Shape.Fill"/>
        <Setter Value="{DynamicResource DisabledBorderBrush}" TargetName="Rectangle" Property="Shape.Stroke"/>
        <Setter Value="{DynamicResource DisabledForegroundBrush}" Property="Control.Foreground"/>
        <Setter Value="{DynamicResource DisabledForegroundBrush}" TargetName="Up_Arrow" Property="Shape.Fill"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="SimpleExpander" TargetType="{x:Type Expander}">
    <Setter Property="Control.Background" Value="{DynamicResource LightBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Expander}">
          <Grid>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto"/>
              <RowDefinition x:Name="ContentRow" Height="*"/>
            </Grid.RowDefinitions>
            <Border x:Name="Border" Grid.Row="0" Background="{TemplateBinding Control.Background}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}" CornerRadius="2,2,0,0">
              <Grid>
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="20"/>
                  <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <ToggleButton Template="{DynamicResource ExpanderToggleButton}" Background="{DynamicResource NormalBrush}"
                              OverridesDefaultStyle="true"
                              IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                <ContentPresenter Grid.Column="1" Margin="4" RecognizesAccessKey="true" ContentSource="Header"/>
              </Grid>
            </Border>
            <Border x:Name="ExpandSite" Visibility="Collapsed" Grid.Row="1"
                    Background="{DynamicResource WindowBackgroundBrush}"
                    BorderBrush="{DynamicResource SolidBorderBrush}" BorderThickness="1,0,1,1" CornerRadius="0,0,2,2">
              <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                Margin="{TemplateBinding Control.Padding}"
                                VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" Focusable="false"/>
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="Expander.IsExpanded" Value="true">
              <Setter TargetName="ExpandSite" Property="UIElement.Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border" Property="Border.Background"/>
              <Setter Value="{DynamicResource DisabledBorderBrush}" TargetName="Border" Property="Border.BorderBrush"/>
              <Setter Value="{DynamicResource DisabledForegroundBrush}" Property="Control.Foreground"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
    <Grid>
      <Grid.ColumnDefinitions>
        <ColumnDefinition/>
        <ColumnDefinition Width="20"/>
      </Grid.ColumnDefinitions>
      <Rectangle x:Name="Rectangle" Grid.ColumnSpan="2" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                 Width="Auto" Height="Auto" RadiusX="5" RadiusY="5" Fill="{DynamicResource NormalBrush}"
                 Stroke="{DynamicResource NormalBorderBrush}"/>
      <Rectangle Grid.Column="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto"
                 Height="Auto" RadiusX="5" RadiusY="5" Fill="{DynamicResource WindowBackgroundBrush}"
                 Stroke="{DynamicResource NormalBorderBrush}"/>
      <Path x:Name="Arrow" Grid.Column="1" HorizontalAlignment="Center" VerticalAlignment="Center"
            Fill="{DynamicResource GlyphBrush}" Data="M 0,0 L 4,4 8,0 Z"/>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="true">
        <Setter Value="{DynamicResource MouseOverBrush}" TargetName="Rectangle" Property="Shape.Fill"/>
      </Trigger>
      <Trigger Property="ToggleButton.IsChecked" Value="true">
        <Setter Value="{DynamicResource PressedBrush}" TargetName="Rectangle" Property="Shape.Fill"/>
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Rectangle" Property="Shape.Fill"/>
        <Setter Value="{DynamicResource DisabledBorderBrush}" TargetName="Rectangle" Property="Shape.Stroke"/>
        <Setter Value="{DynamicResource DisabledForegroundBrush}" Property="Control.Foreground"/>
        <Setter Value="{DynamicResource DisabledForegroundBrush}" TargetName="Arrow" Property="Shape.Fill"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="ComboBoxTextBox" TargetType="{x:Type TextBox}">
    <Border x:Name="PART_ContentHost" Focusable="false" Background="{TemplateBinding Control.Background}"/>
  </ControlTemplate>
  <Style TargetType="{x:Type ComboBox}">
    <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ComboBox}">
          <Grid>
            <ToggleButton x:Name="ToggleButton" Grid.Column="2" Template="{DynamicResource ComboBoxToggleButton}"
                          Focusable="false" ClickMode="Press"
                          IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
            <ContentPresenter x:Name="ContentSite" HorizontalAlignment="Left" Margin="3,3,23,3" VerticalAlignment="Center"
                              Content="{TemplateBinding ComboBox.SelectionBoxItem}"
                              ContentTemplate="{TemplateBinding ComboBox.SelectionBoxItemTemplate}"
                              ContentTemplateSelector="{TemplateBinding ItemsControl.ItemTemplateSelector}"
                              IsHitTestVisible="false"/>
            <TextBox x:Name="PART_EditableTextBox" Visibility="Hidden" Template="{DynamicResource ComboBoxTextBox}"
                     HorizontalAlignment="Left" Margin="3,3,23,3" VerticalAlignment="Center" Focusable="true"
                     Background="Transparent" IsReadOnly="{TemplateBinding ComboBox.IsReadOnly}" Style="{x:Null}"/>
            <Popup x:Name="Popup" IsOpen="{TemplateBinding ComboBox.IsDropDownOpen}" Placement="Bottom"
                   Focusable="false" AllowsTransparency="true" PopupAnimation="Slide">
              <Grid x:Name="DropDown" MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}"
                    MinWidth="{TemplateBinding FrameworkElement.ActualWidth}" SnapsToDevicePixels="true">
                <Border x:Name="DropDownBorder" Background="{DynamicResource WindowBackgroundBrush}"
                        BorderBrush="{DynamicResource SolidBorderBrush}" BorderThickness="1"/>
                <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="true" HorizontalScrollBarVisibility="Auto"
                              VerticalScrollBarVisibility="Auto" CanContentScroll="true">
                  <StackPanel IsItemsHost="true" KeyboardNavigation.DirectionalNavigation="Contained"/>
                </ScrollViewer>
              </Grid>
            </Popup>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="ItemsControl.HasItems" Value="false">
              <Setter TargetName="DropDownBorder" Property="FrameworkElement.MinHeight" Value="95"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter Value="{DynamicResource DisabledForegroundBrush}" Property="Control.Foreground"/>
            </Trigger>
            <Trigger Property="ItemsControl.IsGrouping" Value="true">
              <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </Trigger>
            <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
              <Setter TargetName="DropDownBorder" Property="Border.CornerRadius" Value="4"/>
              <Setter TargetName="DropDownBorder" Property="FrameworkElement.Margin" Value="0,2,0,0"/>
            </Trigger>
            <Trigger Property="ComboBox.IsEditable" Value="true">
              <Setter Property="Control.IsTabStop" Value="false"/>
              <Setter TargetName="PART_EditableTextBox" Property="UIElement.Visibility" Value="Visible"/>
              <Setter TargetName="ContentSite" Property="UIElement.Visibility" Value="Hidden"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type ComboBoxItem}">
    <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ComboBoxItem}">
          <Grid SnapsToDevicePixels="true">
            <Border x:Name="Border" Background="{TemplateBinding Control.Background}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"/>
            <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="ComboBoxItem.IsHighlighted" Value="true">
              <Setter Value="{DynamicResource SelectedBackgroundBrush}" TargetName="Border" Property="Border.Background"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter Value="{DynamicResource DisabledForegroundBrush}" Property="Control.Foreground"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type ProgressBar}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ProgressBar}">
          <Grid>
            <Border x:Name="PART_Track" Background="{DynamicResource PressedBrush}"
                    BorderBrush="{DynamicResource SolidBorderBrush}" BorderThickness="1" CornerRadius="2"/>
            <Border x:Name="PART_Indicator" HorizontalAlignment="Left" Background="{DynamicResource MouseOverBrush}"
                    BorderBrush="{DynamicResource NormalBorderBrush}" BorderThickness="1" CornerRadius="2"/>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type TextBox}">
    <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="UIElement.AllowDrop" Value="true"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TextBox}">
          <Grid>
            <Border x:Name="Border" Background="{DynamicResource WindowBackgroundBrush}"
                    BorderBrush="{DynamicResource SolidBorderBrush}" BorderThickness="1" Padding="2" CornerRadius="2">
              <ScrollViewer x:Name="PART_ContentHost" Margin="0" Background="{TemplateBinding Control.Background}"/>
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border" Property="Border.Background"/>
              <Setter Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border" Property="Border.BorderBrush"/>
              <Setter Value="{DynamicResource DisabledForegroundBrush}" Property="Control.Foreground"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type Label}">
    <Setter Property="Control.HorizontalContentAlignment" Value="Left"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Top"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Label}">
          <Grid>
            <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" RecognizesAccessKey="true"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsEnabled" Value="false"/>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type Menu}">
    <Setter Property="Control.Background" Value="{DynamicResource LightBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
    <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Menu}">
          <Grid>
            <Border x:Name="Border" Margin="1" BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"/>
            <StackPanel Background="{TemplateBinding Control.Background}" IsItemsHost="true" ClipToBounds="true"
                        Orientation="Horizontal"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border" Property="Border.Background"/>
              <Setter Value="{DynamicResource DisabledBorderBrush}" TargetName="Border" Property="Border.BorderBrush"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <DropShadowBitmapEffect x:Key="PopupDropShadow" ShadowDepth="1.5" Softness="0.15"/>
  <Style TargetType="{x:Type MenuItem}">
    <Setter Property="Control.HorizontalContentAlignment"
            Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
    <Setter Property="Control.VerticalContentAlignment"
            Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type MenuItem}">
          <Border x:Name="Border" Background="{TemplateBinding Control.Background}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}">
            <Grid>
              <Grid.ColumnDefinitions>
                <ColumnDefinition MinWidth="17" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup"/>
                <ColumnDefinition Width="14"/>
              </Grid.ColumnDefinitions>
              <ContentPresenter x:Name="Icon" Margin="4,0,6,0" VerticalAlignment="Center" ContentSource="Icon"/>
              <Grid x:Name="GlyphPanel" Visibility="Hidden" Margin="4,0,6,0" VerticalAlignment="Center">
                <Path x:Name="GlyphPanelpath" VerticalAlignment="Center" Fill="{TemplateBinding Control.Foreground}"
                      Data="M 0,2 L 0,4.8 2.5,7.4 7.1,2.8 7.1,0 2.5,4.6 Z" FlowDirection="LeftToRight"/>
              </Grid>
              <ContentPresenter x:Name="HeaderHost" Grid.Column="1" Margin="{TemplateBinding Control.Padding}"
                                RecognizesAccessKey="true" ContentSource="Header"/>
              <Grid x:Name="ArrowPanel" Column="3" Margin="4,0,6,0" VerticalAlignment="Center">
                <Path x:Name="ArrowPanelPath" VerticalAlignment="Center" Fill="{TemplateBinding Control.Foreground}"
                      Data="M 0,0 L 0,8 4,4 Z"/>
              </Grid>
              <Popup x:Name="SubMenuPopup" Placement="Right" Focusable="false" AllowsTransparency="true"
                     PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                     VerticalOffset="-3"
                     IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}">
                <Grid x:Name="SubMenu">
                  <Border x:Name="SubMenuBorder" Background="{DynamicResource WindowBackgroundBrush}"
                          BorderBrush="{DynamicResource SolidBorderBrush}" BorderThickness="1"/>
                  <StackPanel IsItemsHost="true" KeyboardNavigation.DirectionalNavigation="Cycle"/>
                </Grid>
              </Popup>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="MenuItem.Role" Value="TopLevelHeader">
              <Setter Property="FrameworkElement.Margin" Value="0,1,0,1"/>
              <Setter Property="Control.Padding" Value="6,3,6,3"/>
              <Setter Property="Grid.IsSharedSizeScope" Value="true"/>
              <Setter TargetName="SubMenuPopup" Property="Popup.Placement" Value="Bottom"/>
              <Setter TargetName="ArrowPanel" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="MenuItem.Role" Value="TopLevelItem">
              <Setter Property="FrameworkElement.Margin" Value="0,1,0,1"/>
              <Setter Property="Control.Padding" Value="6,3,6,3"/>
              <Setter TargetName="ArrowPanel" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="MenuItem.Role" Value="SubmenuHeader">
              <Setter Property="DockPanel.Dock" Value="Top"/>
              <Setter Property="Control.Padding" Value="0,2,0,2"/>
              <Setter Property="Grid.IsSharedSizeScope" Value="true"/>
            </Trigger>
            <Trigger Property="MenuItem.Role" Value="SubmenuItem">
              <Setter Property="DockPanel.Dock" Value="Top"/>
              <Setter Property="Control.Padding" Value="0,2,0,2"/>
              <Setter TargetName="ArrowPanel" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="MenuItem.IsSuspendingPopupAnimation" Value="true">
              <Setter TargetName="SubMenuPopup" Property="Popup.PopupAnimation" Value="None"/>
            </Trigger>
            <Trigger Value="{x:Null}" Property="MenuItem.Icon">
              <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="MenuItem.IsChecked" Value="true">
              <Setter TargetName="GlyphPanel" Property="UIElement.Visibility" Value="Visible"/>
              <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger SourceName="SubMenuPopup" Property="Popup.AllowsTransparency" Value="true">
              <Setter TargetName="SubMenu" Property="FrameworkElement.Margin" Value="0,0,3,3"/>
              <Setter TargetName="SubMenu" Property="UIElement.SnapsToDevicePixels" Value="true"/>
              <Setter Value="{DynamicResource PopupDropShadow}" TargetName="SubMenuBorder"
                      Property="UIElement.BitmapEffect"/>
            </Trigger>
            <Trigger Property="MenuItem.IsHighlighted" Value="true">
              <Setter Value="{DynamicResource MouseOverBrush}" TargetName="Border" Property="Border.Background"/>
              <Setter Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                      Property="Control.Foreground"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Control.Foreground"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type Separator}">
    <Setter Property="FrameworkElement.Height" Value="1"/>
    <Setter Property="FrameworkElement.Margin" Value="0,2,0,2"/>
    <Setter Property="UIElement.Focusable" Value="false"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Separator}">
          <Border BorderBrush="{DynamicResource SolidBorderBrush}" BorderThickness="1"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type TabControl}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TabControl}">
          <Grid KeyboardNavigation.TabNavigation="Local">
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto"/>
              <RowDefinition Height="*"/>
            </Grid.RowDefinitions>
            <TabPanel x:Name="HeaderPanel" Grid.Row="0" Margin="0,0,4,-1" Background="Transparent" IsItemsHost="true"
                      ZIndex="1" KeyboardNavigation.TabIndex="1"/>
            <Border x:Name="Border" Grid.Row="1" Background="{DynamicResource WindowBackgroundBrush}"
                    BorderBrush="{DynamicResource SolidBorderBrush}" BorderThickness="1" CornerRadius="2"
                    KeyboardNavigation.DirectionalNavigation="Contained" KeyboardNavigation.TabNavigation="Local"
                    KeyboardNavigation.TabIndex="2">
              <ContentPresenter x:Name="PART_SelectedContentHost" Margin="4" ContentSource="SelectedContent"/>
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter Value="{DynamicResource DisabledForegroundBrush}" Property="Control.Foreground"/>
              <Setter Value="{DynamicResource DisabledBorderBrush}" TargetName="Border" Property="Border.BorderBrush"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type TabItem}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TabItem}">
          <Grid>
            <Border x:Name="Border" Margin="0,0,-4,0" Background="{DynamicResource LightBrush}"
                    BorderBrush="{DynamicResource SolidBorderBrush}" BorderThickness="1,1,1,1" CornerRadius="2,12,0,0">
              <ContentPresenter x:Name="ContentSite" HorizontalAlignment="Center" Margin="12,2,12,2" VerticalAlignment="Center"
                                RecognizesAccessKey="true" ContentSource="Header"/>
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter Value="{DynamicResource MouseOverBrush}" TargetName="Border" Property="Border.Background"/>
            </Trigger>
            <Trigger Property="TabItem.IsSelected" Value="true">
              <Setter Property="Panel.ZIndex" Value="100"/>
              <Setter Value="{DynamicResource SelectedBackgroundBrush}" TargetName="Border" Property="Border.Background"/>
              <Setter TargetName="Border" Property="Border.BorderThickness" Value="1,1,1,0"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border" Property="Border.Background"/>
              <Setter Value="{DynamicResource DisabledBorderBrush}" TargetName="Border" Property="Border.BorderBrush"/>
              <Setter Value="{DynamicResource DisabledForegroundBrush}" Property="Control.Foreground"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type Thumb}">
    <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
    <Setter Property="FrameworkElement.Height" Value="14"/>
    <Setter Property="FrameworkElement.Width" Value="14"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          <Grid>
            <Ellipse x:Name="Ellipse" Fill="{DynamicResource NormalBrush}" Stroke="{DynamicResource NormalBorderBrush}"
                     StrokeThickness="1"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter Value="{DynamicResource MouseOverBrush}" TargetName="Ellipse" Property="Shape.Fill"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Ellipse" Property="Shape.Fill"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type Slider}">
    <Setter Property="Control.Background" Value="{DynamicResource LightBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Slider}">
          <Grid x:Name="GridRoot">
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto"/>
              <RowDefinition Height="Auto" MinHeight="{TemplateBinding FrameworkElement.MinHeight}"/>
              <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <TickBar x:Name="TopTick" Visibility="Collapsed" Height="4" SnapsToDevicePixels="true" Placement="Top"
                     Fill="{DynamicResource GlyphBrush}"/>
            <Border x:Name="Border" Grid.Row="1" Margin="0" Height="4"
                    Background="{TemplateBinding Control.Background}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}" CornerRadius="2"/>
            <Track x:Name="PART_Track" Grid.Row="1">
              <Track.Thumb>
                <Thumb Style="{DynamicResource SimpleSliderThumb}"/>
              </Track.Thumb>
              <Track.IncreaseRepeatButton>
                <RepeatButton Style="{DynamicResource SimpleScrollRepeatButtonStyle}" Command="Slider.IncreaseLarge"/>
              </Track.IncreaseRepeatButton>
              <Track.DecreaseRepeatButton>
                <RepeatButton Style="{DynamicResource SimpleScrollRepeatButtonStyle}" Command="Slider.DecreaseLarge"/>
              </Track.DecreaseRepeatButton>
            </Track>
            <TickBar x:Name="BottomTick" Visibility="Collapsed" Grid.Row="2" Height="4" SnapsToDevicePixels="true"
                     Placement="Bottom" Fill="{TemplateBinding Control.Foreground}"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="Slider.TickPlacement" Value="TopLeft">
              <Setter TargetName="TopTick" Property="UIElement.Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Property="Slider.TickPlacement" Value="BottomRight">
              <Setter TargetName="BottomTick" Property="UIElement.Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Property="Slider.TickPlacement" Value="Both">
              <Setter TargetName="TopTick" Property="UIElement.Visibility" Value="Visible"/>
              <Setter TargetName="BottomTick" Property="UIElement.Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border" Property="Border.Background"/>
              <Setter Value="{DynamicResource DisabledBorderBrush}" TargetName="Border" Property="Border.BorderBrush"/>
            </Trigger>
            <Trigger Property="Slider.Orientation" Value="Vertical">
              <Setter TargetName="GridRoot" Property="FrameworkElement.LayoutTransform">
                <Setter.Value>
                  <RotateTransform Angle="-90"/>
                </Setter.Value>
              </Setter>
              <Setter TargetName="PART_Track" Property="Track.Orientation" Value="Horizontal"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="SimpleTreeView" TargetType="{x:Type TreeView}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TreeView}">
          <Grid>
            <Border x:Name="Border" Background="{DynamicResource WindowBackgroundBrush}"
                    BorderBrush="{DynamicResource SolidBorderBrush}" BorderThickness="1" CornerRadius="1">
              <ScrollViewer Focusable="false" Background="{TemplateBinding Control.Background}" Padding="4"
                            HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto" CanContentScroll="false">
                <ItemsPresenter/>
              </ScrollViewer>
            </Border>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="SimpleTreeViewItemToggleButton" TargetType="{x:Type ToggleButton}">
    <Setter Property="UIElement.Focusable" Value="false"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Grid Width="15" Height="13" Background="Transparent">
            <Path x:Name="IsExpandedPath" Visibility="Collapsed" HorizontalAlignment="Left" Margin="1,1,1,1"
                  VerticalAlignment="Center" Fill="{DynamicResource GlyphBrush}" Data="M 0,4 L 8,4 4,8 Z"/>
            <Path x:Name="ExpandPath" HorizontalAlignment="Left" Margin="1,1,1,1" VerticalAlignment="Center"
                  Fill="{DynamicResource GlyphBrush}" Data="M 4,0 L 8,4 4,8 Z"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
              <Setter TargetName="IsExpandedPath" Property="UIElement.Visibility" Value="Visible"/>
              <Setter TargetName="ExpandPath" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="SimpleTreeViewItem" TargetType="{x:Type TreeViewItem}">
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="Control.HorizontalContentAlignment"
            Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
    <Setter Property="Control.VerticalContentAlignment"
            Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
    <Setter Property="Control.Padding" Value="1,0,0,0"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TreeViewItem}">
          <Grid>
            <Grid.ColumnDefinitions>
              <ColumnDefinition MinWidth="19" Width="Auto"/>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto"/>
              <RowDefinition/>
            </Grid.RowDefinitions>
            <ToggleButton x:Name="Expander" Style="{DynamicResource SimpleTreeViewItemToggleButton}" ClickMode="Press"
                          IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"/>
            <Border x:Name="Selection_Border" Grid.Column="1" Background="{TemplateBinding Control.Background}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    Padding="{TemplateBinding Control.Padding}">
              <ContentPresenter x:Name="PART_Header" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                ContentSource="Header"/>
            </Border>
            <ItemsPresenter x:Name="ItemsHost" Grid.Column="1" Grid.ColumnSpan="2" Grid.Row="1"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="TreeViewItem.IsExpanded" Value="false">
              <Setter TargetName="ItemsHost" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="ItemsControl.HasItems" Value="false">
              <Setter TargetName="Expander" Property="UIElement.Visibility" Value="Hidden"/>
            </Trigger>
            <Trigger Property="TreeViewItem.IsSelected" Value="true">
              <Setter Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" TargetName="Selection_Border"
                      Property="Border.Background"/>
              <Setter Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                      Property="Control.Foreground"/>
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="TreeViewItem.IsSelected" Value="true"/>
                <Condition Property="TreeViewItem.IsSelectionActive" Value="false"/>
              </MultiTrigger.Conditions>
              <Setter Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" TargetName="Selection_Border"
                      Property="Border.Background"/>
              <Setter Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" Property="Control.Foreground"/>
            </MultiTrigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Control.Foreground"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
</ResourceDictionary>